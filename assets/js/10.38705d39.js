(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{366:function(t,a,s){"use strict";s.r(a);var n=s(45),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"javascript"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[t._v("#")]),t._v(" JavaScript")]),t._v(" "),s("h2",{attrs:{id:"_1-原始值和引用值类型及区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-原始值和引用值类型及区别"}},[t._v("#")]),t._v(" 1.原始值和引用值类型及区别")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/weixin_42721322/article/details/106333987",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考链接"),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("原始值（简单数据类型）")]),t._v("：存储在栈中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。\n包含五种简单数据类型：undefined、null、boolean、number 和 string ；可以通过typeof 运算符来判断一个值是否在某种类型的范围内，如果它是原始类型，还可以判断它表示哪种原始类型。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var num1 = 100;\nvar num2;\nnum2 = num1;\nnum1=10;\nconsole.log(num1, num2);// 10, 100\n")])])]),s("ul",[s("li",[t._v("引用值（复杂数据类型）：存储在堆中的对象，放在变量的栈空间中的值是该对象存储在堆中的地址，也就是说，存储在变量处的值是一个指针（内存地址），指向存储对象的堆内存中。\n包含：Object、function、array等。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xiaoming'")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  num2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xiaobai'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出结果相同")]),t._v("\n")])])]),s("ul",[s("li",[t._v("但如果你想要复制赋值，另外一个值不会随他的改变而改变，则必须要重新分配对象，此时，该值的原指针（内存地址）改变，则另外一个值不会随他的改变而改变。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xiaoming'")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//num2 = num1;")]),t._v("\nnum2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xiaobai'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//{name: "xiaoming"} {name: "xiaobai"}输出结果不同')]),t._v("\n")])])]),s("h2",{attrs:{id:"_2-判断数据类型typeof、instanceof、object-prototype-tostring-call-、constructor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-判断数据类型typeof、instanceof、object-prototype-tostring-call-、constructor"}},[t._v("#")]),t._v(" 2. 判断数据类型typeof、instanceof、Object.prototype.toString.call()、constructor")]),t._v(" "),s("p",[t._v("JS的数据类型: 基础数据类型和复杂数据类型(引用数据类型)")]),t._v(" "),s("ul",[s("li",[t._v("基础数据类型: number string undefined null boolean symbol")]),t._v(" "),s("li",[t._v("引用数据类型: object")])]),t._v(" "),s("h3",{attrs:{id:"typeof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typeof"}},[t._v("#")]),t._v(" typeof")]),t._v(" "),s("p",[t._v("null 有属于自己的类型 Null，而不属于Object类型，typeof 之所以会判定为 Object 类型，是因为JavaScript 数据类型在底层都是以二进制的形式表示的，二进制的前三位为 0 会被 typeof 判断为对象类型，而 null 的二进制位恰好都是 0 ，因此，null 被误判断为 Object 类型。")]),t._v(" "),s("p",[t._v("优点：能快速检查undefined,string,number,boolean类型")]),t._v(" "),s("p",[t._v("缺点：当类型为object,null,array时都会返回object,所以不能区分这三类")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//string")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("　　"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//number")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("　　"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//boolean")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("　　"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//object")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("　　"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//undefined")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("　　"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//object")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("　　"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//function")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("　　"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//object")]),t._v("\n")])])]),s("h3",{attrs:{id:"instanceof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#instanceof"}},[t._v("#")]),t._v(" instanceof")]),t._v(" "),s("p",[t._v("instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。简单来说就是 instanceof 是用来判断 A 是否为 B 的实例，表达式为\nA (object) instanceof B (constructor)\n如果 A 是 B 的实例，则返回 true,否则返回 false。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\narr "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),t._v("\n")])])]),s("p",[t._v("优点：能检测array,function,object类型")]),t._v(" "),s("p",[t._v("缺点:检测不了字面量定义的number,boolean,string")]),t._v(" "),s("h3",{attrs:{id:"object-prototype-tostring-call"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-tostring-call"}},[t._v("#")]),t._v(" Object.prototype.toString.call()")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" “"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("object Number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("”\nobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("“"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" “"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("object String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("”\nobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" “"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("object Boolean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("”\n")])])]),s("p",[t._v("除了null/undefined，大部分数据类型所属类的原型上，都有toString方法；但是所有的toString方法都是转换为字符串的只有Object原型上的toString方法是检测数据类型的。\n优点：结果准确")]),t._v(" "),s("h3",{attrs:{id:"constructor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[t._v("#")]),t._v(" constructor")]),t._v(" "),s("p",[t._v("和instanceof类似，都是临时用做数据类型检测使用的，constructor原型可以重构，导致结构不准确。\n相对于instanceof，constructor可以检测原始值类型，但是只会基于原型链上的直属类检测。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" Array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" Object "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\nps：因为arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor直接指向的是Array\n")])])]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v("Fn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v("Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("我声明了一个构造函数，并且把他的原型指向了Array的原型，所以这种情况下，constructor也显得力不从心了。")]),t._v(" "),s("h2",{attrs:{id:"_3-类数组与数组的区别与转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-类数组与数组的区别与转换"}},[t._v("#")]),t._v(" 3. 类数组与数组的区别与转换")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("相同点：都可用下标访问每个元素，都有length属性。")])]),t._v(" "),s("li",[s("p",[t._v("不同点：数组对象的类型是Array,类数组对象的类型是object，也就是说类数组原型是Object;类数组不具有数组所具有的方法，数组遍历可以用 for in和for循环,类数组只能用for循环遍历。")])])]),t._v(" "),s("p",[t._v("常见的类数组有: 函数的参数 arguments, DOM 对象列表(比如通过 document.querySelectorAll 得到的列表), jQuery 对象 (比如 $(“div”)).")]),t._v(" "),s("h3",{attrs:{id:"转换方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转换方法"}},[t._v("#")]),t._v(" 转换方法：")]),t._v(" "),s("h4",{attrs:{id:"数组转变成类数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组转变成类数组"}},[t._v("#")]),t._v(" 数组转变成类数组:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("输出为原型为Object 的一个对象")]),t._v(" "),s("h4",{attrs:{id:"类数组转变为数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类数组转变为数组"}},[t._v("#")]),t._v(" 类数组转变为数组：")]),t._v(" "),s("ul",[s("li",[t._v("方法一:Array.prototype.slice.call(arrayLike, start);")]),t._v(" "),s("li",[t._v("方法二: Array.from(arrayLike);")])]),t._v(" "),s("h3",{attrs:{id:"_4-数组的常见api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-数组的常见api"}},[t._v("#")]),t._v(" 4. 数组的常见API")]),t._v(" "),s("h4",{attrs:{id:"不改变原数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不改变原数组"}},[t._v("#")]),t._v(" 不改变原数组：")]),t._v(" "),s("ul",[s("li",[t._v("将数组转化为字符串（String）")]),t._v(" "),s("li",[t._v("把数组中的所有元素放入一个字符串（join）")]),t._v(" "),s("li",[t._v("数组拼接（concat）")]),t._v(" "),s("li",[t._v("数组选取，获取子数组（slice 含头不含尾）")]),t._v(" "),s("li",[t._v("返回某个指定的字符串值在字符串中首次出现的位置（indexOf）")])]),t._v(" "),s("h4",{attrs:{id:"改变原数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#改变原数组"}},[t._v("#")]),t._v(" 改变原数组")]),t._v(" "),s("ul",[s("li",[t._v("从数组中添加/删除项目，然后返回被删除的项目（splice(i,n,jia,jia)从第i个开始的n个元素）")]),t._v(" "),s("li",[t._v("反转数组元素（reverse）")]),t._v(" "),s("li",[t._v("对数组的元素进行排序（sort）")]),t._v(" "),s("li",[t._v("向数组的末尾添加一个或多个元素，并返回新的长度（push）")]),t._v(" "),s("li",[t._v("删除并返回数组的最后一个元素（pop）")]),t._v(" "),s("li",[t._v("用于把数组的第一个元素从其中删除，并返回第一个元素的值（shift）")]),t._v(" "),s("li",[t._v("向数组的开头添加一个或更多元素，并返回新的长度（unshift）")])]),t._v(" "),s("h4",{attrs:{id:"迭代方法-以下方法都不会修改数组中包含的值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代方法-以下方法都不会修改数组中包含的值"}},[t._v("#")]),t._v(" 迭代方法（以下方法都不会修改数组中包含的值）：")]),t._v(" "),s("ul",[s("li",[t._v("every():对数组中的每一项运行给定的函数，如果该函数对每一项都返回true，则返回true。")]),t._v(" "),s("li",[t._v("filter():对数组中的每一项运行给定的函数，返回该函数会返回true的项组成的数组。")]),t._v(" "),s("li",[t._v("forEach():对数组中的每一项运行给定的函数。这个方法没有返回值。")]),t._v(" "),s("li",[t._v("map():对数组中的每一项运行给定的函数，返回每次函数调用的结果组成的数组。")]),t._v(" "),s("li",[t._v("some():对数组中的每一项运行给定的函数，如果该函数对任一项返回true，则返回true。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" numbers"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" everyResult"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("numbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("every")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("everyResult"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])])]),s("h3",{attrs:{id:"_5-bind、call、apply的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-bind、call、apply的区别"}},[t._v("#")]),t._v(" 5. bind、call、apply的区别")]),t._v(" "),s("p",[t._v("三者都是用于改变函数体内this的指向，但是bind与apply和call的最大的区别是：bind不会立即调用，而是返回一个新函数，称为绑定函数，其内的this指向为创建它时传入bind的第一个参数，而传入bind的第二个及以后的参数作为原函数的参数来调用原函数。")]),t._v(" "),s("p",[t._v("apply和call都是为了改变某个函数运行时的上下文而存在的（就是为了改变函数内部this的指向）；apply和call的调用返回函数执行结果；")]),t._v(" "),s("p",[t._v("如果使用apply或call方法，那么this指向他们的第一个参数，apply的第二个参数是一个参数数组，call的第二个及其以后的参数都是数组里面的元素，就是说要全部列举出来；")]),t._v(" "),s("h4",{attrs:{id:"区别总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区别总结"}},[t._v("#")]),t._v(" 区别总结：")]),t._v(" "),s("ul",[s("li",[t._v("当我们使用一个函数需要改变this指向的时候才会用到call,apply,bind")]),t._v(" "),s("li",[t._v("如果你要传递的参数不多，则可以使用fn.call(thisObj, arg1, arg2 ...)")]),t._v(" "),s("li",[t._v("如果你要传递的参数很多，则可以用数组将参数整理好调用fn.apply(thisObj, [arg1, arg2 ...])")]),t._v(" "),s("li",[t._v("如果你想生成一个新的函数长期绑定某个函数给某个对象使用，则可以使用")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" testObj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("testObj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" objTest "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"作者"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"chengbo"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 预期返回false, 但是testObj是个绑定函数，所以不能改变其this指向\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("testObj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("objTest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("testObj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("objTest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"_6-new的原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-new的原理"}},[t._v("#")]),t._v(" 6. new的原理")]),t._v(" "),s("p",[t._v("new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例")]),t._v(" "),s("p",[t._v("访问到构造函数里的属性\n访问到原型中的属性")]),t._v(" "),s("p",[t._v("没有return语句\n从构造函数直观看，最后是没有 return语句的，但我们从返回结果也可以看出构造函数时默认情况会返回一个新对象")]),t._v(" "),s("h3",{attrs:{id:"new原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new原理"}},[t._v("#")]),t._v(" new原理")]),t._v(" "),s("p",[t._v("mdn上把内部操作大概分为4步：")]),t._v(" "),s("ol",[s("li",[t._v("创建一个空的简单JavaScript对象（即{ } ）；")]),t._v(" "),s("li",[t._v("链接该对象（即设置该对象的构造函数）到另一个对象 ；(因此this就指向了这个新对象)")]),t._v(" "),s("li",[t._v("执行构造函数中的代码（为这个新对象添加属性）；")]),t._v(" "),s("li",[t._v("如果该函数没有返回对象，则返回this。")])]),t._v(" "),s("h3",{attrs:{id:"_7-如何正确判断this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-如何正确判断this"}},[t._v("#")]),t._v(" 7. 如何正确判断this？")]),t._v(" "),s("ul",[s("li",[t._v("this在调用的时候才会指向")]),t._v(" "),s("li",[t._v("new可以改变this的指向,new中有返回值，如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"追梦子"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//追梦子")]),t._v("\n")])])]),s("h2",{attrs:{id:"_8-闭包及其作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-闭包及其作用"}},[t._v("#")]),t._v(" 8. 闭包及其作用")]),t._v(" "),s("p",[s("strong",[t._v("如果一个函数用到了它作用域外面的变量，那么这个变量和这个函数之间的环境就叫闭包。")])]),t._v(" "),s("p",[s("strong",[t._v("闭包的用途有些什么？")])]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("模仿块级作用域")]),t._v("\n所谓块级作用域就是指在循环中定义的变量，一旦循环结束，变量也随之销毁，它的作用范围只在这一小块。而在JavaScript中没有这样的块级作用域，由于JavaScript不会告诉你变量是否已经被声明，所以容易造成命名冲突，如果在全局环境定义的变量，就会污染全局环境，因此可以利用闭包的特性来模仿块级作用域。")]),t._v(" "),s("li",[s("strong",[t._v("储存变量")]),t._v("\n闭包的另一个特点是可以保存外部函数的变量，内部函数保留了对外部函数的活动变量的引用，所以变量不会被释放。")]),t._v(" "),s("li",[s("strong",[t._v("封装私有变量")]),t._v("\n我们可以把函数当作一个范围，函数内部的变量就是私有变量，在外部无法引用，但是我们可以通过闭包的特点来访问私有变量。")])]),t._v(" "),s("h2",{attrs:{id:"_9-原型和原型链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-原型和原型链"}},[t._v("#")]),t._v(" 9. 原型和原型链")]),t._v(" "),s("h3",{attrs:{id:"prototype"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prototype"}},[t._v("#")]),t._v(" prototype")]),t._v(" "),s("p",[t._v("在JavaScript中，每个函数都有一个prototype属性，这个属性指向函数的原型对象。")]),t._v(" "),s("p",[s("strong",[t._v("原型")]),t._v("的概念：每一个javascript对象(除null外)创建的时候，就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型中“继承”属性。\n"),s("img",{attrs:{src:"/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B%E5%8E%9F%E5%9E%8B%E5%85%B3%E7%B3%BB.png",alt:"构造函数与示例原型关系"}})]),t._v(" "),s("p",[s("strong",[t._v("实例对象的原型中会有公共的方法，每个实例都可以访问到，这样无需再重复实现，也就是继承。所以JavaScript中的继承，不是通过复制而来的，而是通过原型继承的，而访问的过程，就是所谓的“原型链”了。")])]),t._v(" "),s("h3",{attrs:{id:"原型链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[t._v("#")]),t._v(" 原型链")]),t._v(" "),s("p",[t._v("每个实例对象（ object ）都有一个私有属性（可称之为__proto__ ）指向它的构造函数的原型对象（prototype ）。该原型对象也有一个自己的原型对象(为__proto__ ) ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。")]),t._v(" "),s("h3",{attrs:{id:"proto-原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#proto-原理"}},[t._v("#")]),t._v(" __proto__原理")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),s("p",[t._v("这是每个对象(除null外)都会有的属性，叫做__proto__，这个属性会指向该对象的原型。\n"),s("img",{attrs:{src:"/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E7%A4%BA%E4%BE%8B%E5%8E%9F%E5%9E%8B%E5%85%B3%E7%B3%BB2.png",alt:"构造函数与示例原型关系2"}}),t._v("\n绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于 Object.prototype ，与其说是一个属性，不如说是一个 getter/setter，当使用 obj."),s("strong",[t._v("proto")]),t._v(" 时，可以理解成返回了 Object.getPrototypeOf(obj)。")]),t._v(" "),s("h2",{attrs:{id:"_10-prototype与-proto-的关系与区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-prototype与-proto-的关系与区别"}},[t._v("#")]),t._v(" 10. prototype与__proto__的关系与区别")]),t._v(" "),s("p",[t._v("要注意区分__proto__和prototype：")]),t._v(" "),s("ul",[s("li",[t._v("__proto__是实例对象的私有属性，指向它的构造函数的prototype属性")]),t._v(" "),s("li",[t._v("prototype是构造函数的属性，在调用构造函数创建实例对象时，实例对象通过__proto__和prototype相关联。同样的，prototype对象中会有__proto__，指向它自己的原型，这样一层层链接，直到指向null，形成原型链")]),t._v(" "),s("li",[t._v("构造函数都是Function的实例")]),t._v(" "),s("li",[t._v("函数默认有prototype属性，是定义公共方法的地方；prototype中有constructor属性，是指向函数本身。")])]),t._v(" "),s("h2",{attrs:{id:"_11-继承的实现方式及比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-继承的实现方式及比较"}},[t._v("#")]),t._v(" 11. 继承的实现方式及比较")]),t._v(" "),s("ul",[s("li",[t._v("原型继承, 将子类的原型指向了父类的实例, 这样子类就可以通过__proto__摸到父类的实例属性, 再由父类的实例的__proto__摸到其构造函数的原型对象")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("c")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("call继承, 这样父类改变了子类的实例, 不过call是Function上的方法")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("c")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("冒充对象继承, 循环遍历父类实例, 然后将父类实例的私有方法全部拿来给子类实例")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("c")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" p1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("混合继承, 将 call 继承和原型继承集合在一起")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("c")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("中间件继承, 子类可以继承到父类的公有方法当做自己的公有方法")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("c")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("寄生组合继承")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("c")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//继承实例属性")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("inheritPrototype")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("sub"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" prototype "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sup"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//继承原型链")]),t._v("\n  prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sub"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  sub"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("inheritPrototype")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("经典继承")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("o")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("c")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("c")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这样就继承o了")]),t._v("\n")])])]),s("h3",{attrs:{id:"继承方法比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承方法比较"}},[t._v("#")]),t._v(" 继承方法比较")]),t._v(" "),s("ul",[s("li",[t._v("原型继承, 不同子类实例会共享同一对象, 如果修改属性其他实例获得的也是修改的, 并且创建子类实例的时候不能向超类构造函数传递参数")]),t._v(" "),s("li",[t._v("组合继承, 每次都会调用两次超类的构造函数, 并且不同子类实例共享同一对象")])]),t._v(" "),s("p",[t._v("完美的是寄生继承, 子类都有各自的实例, 不会互相影响, 且共享了父类的方法")]),t._v(" "),s("h2",{attrs:{id:"_12-深拷贝与浅拷贝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-深拷贝与浅拷贝"}},[t._v("#")]),t._v(" 12. 深拷贝与浅拷贝")]),t._v(" "),s("p",[t._v("浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。")]),t._v(" "),s("p",[t._v("但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。")]),t._v(" "),s("h2",{attrs:{id:"_13-防抖和节流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-防抖和节流"}},[t._v("#")]),t._v(" 13. 防抖和节流")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("防抖（debounce）：当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。")])]),t._v(" "),s("li",[s("p",[t._v("节流（throttle）：当持续触发事件时，保证一定时间段内只调用一次事件处理函数。节流通俗解释就比如我们水龙头放水，阀门一打开，水哗哗的往下流，秉着勤俭节约的优良传统美德，我们要把水龙头关小点，最好是如我们心意按照一定规律在某个时间间隔内一滴一滴的往下滴。")])])]),t._v(" "),s("h3",{attrs:{id:"区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[t._v("#")]),t._v(" 区别")]),t._v(" "),s("p",[t._v("函数节流不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数，而函数防抖只是在最后一次事件后才触发一次函数。 比如在页面的无限加载场景下，我们需要用户在滚动页面时，每隔一段时间发一次 Ajax 请求，而不是在用户停下滚动页面操作时才去请求数据。这样的场景，就适合用节流技术来实现。")]),t._v(" "),s("h2",{attrs:{id:"_14-作用域和作用域链、执行期上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-作用域和作用域链、执行期上下文"}},[t._v("#")]),t._v(" 14. 作用域和作用域链、执行期上下文")]),t._v(" "),s("h3",{attrs:{id:"作用域-scope"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用域-scope"}},[t._v("#")]),t._v(" 作用域(Scope)")]),t._v(" "),s("p",[t._v("作用域概念是理解JavaScript的关键所在，不仅仅从性能角度，还包括从功能角度。作用域就是变量和函数的可访问范围，控制着变量和函数的可见性与生命周期，换句话说，作用域决定了代码区块中变量和其他资源的可见性。在JavaScript中变量的作用域有全局作用域和局部作用域。JavaScript采用词法作用域(lexical scoping)，也就是静态作用域。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("词法作用域：词法作用域是指在词法分析阶段就确定了，不会改变。变量的作用域是在定义时决定而不是执行时决定，也就是说词法作用域取决于源码，通过静态分析就能确定，因此词法作用域也叫做静态作用域。")])]),t._v(" "),s("li",[s("p",[t._v("动态作用域：动态作用域是在运行时根据程序的流程信息来动态确定的，而不是在写代码时进行静态确定的。 动态作用域并不关心函数和作用域是如何声明以及在何处声明的，只关心它们在何处调用。")])])]),t._v(" "),s("h4",{attrs:{id:"全局作用域、局部作用域和块级作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局作用域、局部作用域和块级作用域"}},[t._v("#")]),t._v(" 全局作用域、局部作用域和块级作用域")]),t._v(" "),s("p",[t._v("在ECMAScript 5（包括ECMAScript 5）之前的版本中，作用域只有全局作用域和局部作用域，不存在块级作用域；ECMAScript 6引入了let和const关键字，利用let和const可以形成块级作用域。")]),t._v(" "),s("ol",[s("li",[t._v("全局作用域")])]),t._v(" "),s("p",[t._v("在代码中任何地方都能访问到的对象拥有全局作用域。全局作用域的变量是全局对象的属性，不论在什么函数中都可以直接访问，而不需要通过全局对象，但加上全局对象，可以提供搜索效率。")]),t._v(" "),s("p",[t._v("a、没有用var声明的变量（除去函数的参数）都具有全局作用域，成为全局变量，所以声明局部变量必须要用var。")]),t._v(" "),s("p",[t._v("b、window的所有属性都具有全局作用域")]),t._v(" "),s("p",[t._v("c、最外层函数体外声明的变量也具有全局作用域")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("局部作用域")])]),t._v(" "),s("p",[t._v("局部变量的优先级高于全局变量。")]),t._v(" "),s("p",[t._v("a、函数体内用var声明的变量具有局部作用域，成为局部变量")]),t._v(" "),s("p",[t._v("b、函数的参数也具有局部作用域")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("块级作用域")])]),t._v(" "),s("p",[t._v("使用let和const关键字声明的变量，会在形成块级作用域。")]),t._v(" "),s("h3",{attrs:{id:"上下文-context"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#上下文-context"}},[t._v("#")]),t._v(" 上下文(context)")]),t._v(" "),s("p",[t._v("许多开发人员经常混淆作用域(scope)和上下文(context)，很多误解为它们是相同的概念。但事实并非如此。作用域(scope)我们上面已经讨论过了，而上下文(context)是用来指定代码某些特定部分中this的值。作用域(scope) 是指变量的可访问性，上下文(context)是指this在同一作用域内的值。我们也可以使用call()、apply()、bind()、箭头函数等改变上下文。在浏览器中在全局作用域(scope)中上下文中始终是Window对象。在Node.js中在全局作用域(scope)中上下文中始终是Global 对象。")]),t._v(" "),s("p",[t._v("上下文始终坚持一个原理：this 永远指向最后调用它的那个对象，上例中调用a函数的是window，所以a函数中的this指向window对象。关于this以及改变this的指向，可以参考this、apply、call、bind")]),t._v(" "),s("h3",{attrs:{id:"作用域链-scope-chain"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用域链-scope-chain"}},[t._v("#")]),t._v(" 作用域链(Scope Chain)")]),t._v(" "),s("p",[t._v("JavaScript 中每个函数都都表示为一个函数对象（函数实例），函数对象有一个仅供 JavaScript 引擎使用的[[scope]] 属性。通过语法分析和预解析，将[[scope]] 属性指向函数定义时作用域中的所有对象集合。这个集合被称为函数的作用域链（scope chain），包含函数定义时作用域中所有可访问的数据。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" num2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("当定义 add 函数后，其作用域链就创建了。函数所在的全局作用域的全局对象被放置到 add 函数作用域链（[[scope]] 属性）中。我们可以从下图中看到作用域链的第一个对象保存的是全局对象，全局对象中保存了诸如 this , window , document 以及全局对象中的 add 函数，也就是他自己。这也就是我们可以在全局作用域下的函数中访问 window(this)，访问全局变量，访问函数自身的原因。全局上下文中的变量对象(Variable object，VO)就是全局对象。")]),t._v(" "),s("h3",{attrs:{id:"执行期上下文-execution-context"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行期上下文-execution-context"}},[t._v("#")]),t._v(" 执行期上下文(Execution Context)")]),t._v(" "),s("p",[t._v("执行具体的某个函数时，JS引擎在执行每个函数实例时，都会创建一个执行期上下文（Execution Context）和激活对象（active Object）（它们属于宿主对象，与函数实例执行的生命周期保持一致，也就是函数执行完成，这些对象也就被销毁了，闭包例外。）")]),t._v(" "),s("p",[t._v("执行该函数创建一个内部对象，称为 Execution Context（执行期上下文）。执行期上下文定义了一个函数正在执行时的作用域环境。特别注意，执行期上下文和我们平常说的上下文不同，执行期上下文指的是作用域。平常说的上下文是this的取值指向。执行期上下文和函数创建时的作用域链对象 [[scope]] 区分，这是两个不同的作用域链对象。分开的原因很简单，函数定义时的作用域链对象 [[scope]] 是固定的，而 执行期上下文 会根据不同的运行时环境变化。而且该函数每执行一次，都会创建单独的 执行期上下文，因此对同一函数调用多次，会导致创建多个执行期上下文。一旦函数执行完成，执行期上下文将被销毁。")]),t._v(" "),s("h2",{attrs:{id:"_15-dom常见的操作方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-dom常见的操作方式"}},[t._v("#")]),t._v(" 15. DOM常见的操作方式")]),t._v(" "),s("h3",{attrs:{id:"_1-访问-获取节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-访问-获取节点"}},[t._v("#")]),t._v(" 1.访问/获取节点")]),t._v(" "),s("p",[t._v("document.getElementById(id);　　　　　　　　 　　//返回对拥有指定id的第一个对象进行访问")]),t._v(" "),s("p",[t._v("document.getElementsByName(name);　　　　　　//返回带有指定名称的节点集合　　 注意拼写:Elements")]),t._v(" "),s("p",[t._v("document.getElementsByTagName(tagname); 　　//返回带有指定标签名的对象集合　  注意拼写：Elements")]),t._v(" "),s("p",[t._v("document.getElementsByClassName(classname);  //返回带有指定class名称的对象集合 注意拼写：Elements")]),t._v(" "),s("h3",{attrs:{id:"_2-创建节点-属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建节点-属性"}},[t._v("#")]),t._v(" 2.创建节点/属性")]),t._v(" "),s("p",[t._v("document.createElement(eName);　　//创建一个节点")]),t._v(" "),s("p",[t._v("document.createAttribute(attrName); //对某个节点创建属性")]),t._v(" "),s("p",[t._v("document.createTextNode(text);　　　//创建文本节点")]),t._v(" "),s("h3",{attrs:{id:"_3-添加节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-添加节点"}},[t._v("#")]),t._v(" 3.添加节点")]),t._v(" "),s("p",[t._v("document.insertBefore(newNode,referenceNode);　 //在某个节点前插入节点")]),t._v(" "),s("p",[t._v("parentNode.appendChild(newNode);　　　　　　　　//给某个节点添加子节点")]),t._v(" "),s("h3",{attrs:{id:"_4-复制节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-复制节点"}},[t._v("#")]),t._v(" 4.复制节点")]),t._v(" "),s("p",[t._v("cloneNode(true | false);　　//复制某个节点  参数：是否复制原节点的所有属性")]),t._v(" "),s("h3",{attrs:{id:"_5-删除节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-删除节点"}},[t._v("#")]),t._v(" 5.删除节点")]),t._v(" "),s("p",[t._v("parentNode.removeChild(node);　　//删除某个节点的子节点 node是要删除的节点")]),t._v(" "),s("h3",{attrs:{id:"_7-属性操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-属性操作"}},[t._v("#")]),t._v(" 7.属性操作")]),t._v(" "),s("p",[t._v("getAttribute(name)　　　　//通过属性名称获取某个节点属性的值")]),t._v(" "),s("p",[t._v("setAttribute(name,value);  //修改某个节点属性的值")]),t._v(" "),s("p",[t._v("removeAttribute(name);　 //删除某个属性")]),t._v(" "),s("h3",{attrs:{id:"_8-查找节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-查找节点"}},[t._v("#")]),t._v(" 8.查找节点")]),t._v(" "),s("p",[t._v("parentObj.firstChild;　　//如果节点为已知节点的第一个子节点就可以使用这个方法。此方法可以递归进行使用 parentObj.firstChild.firstChild.....")]),t._v(" "),s("p",[t._v("parentObj.lastChild;　　//获得一个节点的最后一个节点，与firstChild一样也可以进行递归使用 parentObj.lastChild.lastChild.....")]),t._v(" "),s("p",[t._v("parentObj.childNodes;   //获得节点的所有子节点，然后通过循环和索引找到目标节点")]),t._v(" "),s("h3",{attrs:{id:"_9-获取相邻的节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-获取相邻的节点"}},[t._v("#")]),t._v(" 9.获取相邻的节点")]),t._v(" "),s("p",[t._v("curtNode.previousSibling;  //获取已知节点的相邻的上一个节点")]),t._v(" "),s("p",[t._v("curtNode.nextSlbling;　　  // 获取已知节点的下一个节点")]),t._v(" "),s("h3",{attrs:{id:"_10-获取父节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-获取父节点"}},[t._v("#")]),t._v(" 10.获取父节点")]),t._v(" "),s("p",[t._v("childNode.parentNode;　　//得到已知节点的父节点")]),t._v(" "),s("h3",{attrs:{id:"_11-替换节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-替换节点"}},[t._v("#")]),t._v(" 11.替换节点")]),t._v(" "),s("p",[t._v("replace(newNode,oldNode);")]),t._v(" "),s("h2",{attrs:{id:"_16-array-sort-方法与实现机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16-array-sort-方法与实现机制"}},[t._v("#")]),t._v(" 16. Array.sort()方法与实现机制")]),t._v(" "),s("p",[t._v("该排序方法每个浏览器中实现的都不太一样")]),t._v(" "),s("p",[t._v("chrome 目前采用快排(QuickSort)和插入排序(InsertaionSort),而对于火狐，它采用归并排序(MergeSort)。而IE使用快排。")]),t._v(" "),s("h2",{attrs:{id:"_17-ajax的请求过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-ajax的请求过程"}},[t._v("#")]),t._v(" 17. Ajax的请求过程")]),t._v(" "),s("p",[t._v("第一步：创建异步对象")]),t._v(" "),s("p",[t._v("var xhr = new XMLHttpRequest();")]),t._v(" "),s("p",[t._v("第二步：设置 请求行 open(请求方式，请求url):")]),t._v(" "),s("p",[t._v('// get请求如果有参数就需要在url后面拼接参数，\n// post如果有参数，就在请求体中传递 xhr.open("get","validate.php?username="+name)\nxhr.open("post","validate.php");')]),t._v(" "),s("p",[t._v("第三步：设置请求（GET方式忽略此步骤）头:setRequestHeader()")]),t._v(" "),s("p",[t._v('// 1.get不需要设置\n// 2.post需要设置请求头：Content-Type:application/x-www-form-urlencoded\nxhr.setRequestHeader("Content-Type","application/x-www-form-urlencoded");')]),t._v(" "),s("p",[t._v("第四步：设置请求体 send()")]),t._v(" "),s("p",[t._v('// 1.get的参数在url拼接了，所以不需要在这个函数中设置\n// 2.post的参数在这个函数中设置(如果有参数)\nxhr.send(null) xhr.send("username="+name);')]),t._v(" "),s("p",[t._v("第五步：让异步对象接收服务器的响应数据")]),t._v(" "),s("p",[t._v("// 一个成功的响应有两个条件：1.服务器成功响应了 2.异步对象的响应状态为4(数据解析完毕可以使用了)")]),t._v(" "),s("p",[t._v("xhr.onreadystatechange = function(){\nif(xhr.status == 200 && xhr.readyState == 4){\nconsole.log(xhr.responseText);\n}")]),t._v(" "),s("h2",{attrs:{id:"_18-js的垃圾回收机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18-js的垃圾回收机制"}},[t._v("#")]),t._v(" 18. JS的垃圾回收机制")]),t._v(" "),s("h3",{attrs:{id:"什么是js垃圾回收-what"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是js垃圾回收-what"}},[t._v("#")]),t._v(" 什么是js垃圾回收？(what)")]),t._v(" "),s("p",[t._v("JavaScript中也具有自动垃圾回收机制（GC：Garbage Collection）;")]),t._v(" "),s("p",[t._v("因为内存内容是极其有限的，所以垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放内存")]),t._v(" "),s("p",[t._v("其中不再使用的变量一般只可能是局部变量，即在函数执行结束的时候，所使用的局部变量所占的内存会随之被回收，当然在闭包中内部函数会占用着外部函数的局部变量。")]),t._v(" "),s("h3",{attrs:{id:"有哪些垃圾回收方式-how"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有哪些垃圾回收方式-how"}},[t._v("#")]),t._v(" 有哪些垃圾回收方式？(how)")]),t._v(" "),s("p",[t._v("到底哪个变量是没有用的？所以垃圾收集器必须跟踪到底哪个变量没用，对于不再有用的变量打上标记，以备将来收回其内存。")]),t._v(" "),s("p",[t._v("用于标记的无用变量的策略可能因实现而有所区别，通常情况下有两种实现方式：标记清除和引用计数。引用计数不太常用，标记清除较为常用。")]),t._v(" "),s("h4",{attrs:{id:"_1-标记清除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-标记清除"}},[t._v("#")]),t._v(" 1.标记清除：")]),t._v(" "),s("p",[t._v("垃圾回收器在运行的时候会给存储在内存中的所有变量都加上标记（当然，可以使用任何标记方式）。然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记（闭包）。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后，垃圾回收器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。")]),t._v(" "),s("p",[t._v("到目前为止，IE、Firefox、Opera、Chrome、Safari的js实现使用的都是标记清除的垃圾回收策略或类似的策略，只不过垃圾收集的时间间隔互不相同。")]),t._v(" "),s("h4",{attrs:{id:"_2-引用计数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-引用计数"}},[t._v("#")]),t._v(" 2.引用计数：")]),t._v(" "),s("p",[t._v("引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾回收器下次再运行时，它就会释放那些引用次数为0的值所占用的内存。")]),t._v(" "),s("h3",{attrs:{id:"什么时候进行垃圾回收-when"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么时候进行垃圾回收-when"}},[t._v("#")]),t._v(" 什么时候进行垃圾回收？(when)")]),t._v(" "),s("p",[t._v("垃圾回收器周期性运行，如果分配的内存非常多，那么回收工作也会很艰巨，确定垃圾回收时间间隔就变成了一个值得思考的问题。IE6的垃圾回收是根据内存分配量运行的，当环境中存在256个变量、4096个对象、64k的字符串任意一种情况的时候就会触发垃圾回收器工作，看起来很科学，不用按一段时间就调用一次，有时候会没必要，这样按需调用不是很好吗？但是如果环境中就是有这么多变量等一直存在，现在脚本如此复杂，很正常，那么结果就是垃圾回收器一直在工作，这样浏览器就没法儿玩儿了。")]),t._v(" "),s("p",[t._v("微软在IE7中做了调整，触发条件不再是固定的，而是动态修改的，初始值和IE6相同，如果垃圾回收器回收的内存分配量低于程序占用内存的15%，说明大部分内存不可被回收，设的垃圾回收触发条件过于敏感，这时候把临街条件翻倍，如果回收的内存高于85%，说明大部分内存早就该清理了，这时候把触发条件置回。这样就使垃圾回收工作职能了很多。")]),t._v(" "),s("h2",{attrs:{id:"_19-js中的string、array和math方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19-js中的string、array和math方法"}},[t._v("#")]),t._v(" 19. JS中的String、Array和Math方法")]),t._v(" "),s("h3",{attrs:{id:"string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),s("ul",[s("li",[t._v("charAt() 返回指定位置的字符。")]),t._v(" "),s("li",[t._v("charCodeAt() 返回字符串中某个具体字符的 Unicode编码。")]),t._v(" "),s("li",[t._v("concat() 方法用于连接两个或多个字符串")]),t._v(" "),s("li",[t._v("substring(start,end)")]),t._v(" "),s("li",[t._v("slice(start,end)")]),t._v(" "),s("li",[t._v("substr(start,length)")]),t._v(" "),s("li",[t._v("toLowerCase(）")]),t._v(" "),s("li",[t._v("toUpperCase()")])]),t._v(" "),s("p",[t._v("字符串位置方法：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("indexOf(searchValue, fromindex)\n返回某个指定的字符串值在字符串中首次出现的位置。")])]),t._v(" "),s("li",[s("p",[t._v("lastIndexOf(search, fromindex）\n返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索。")])]),t._v(" "),s("li",[s("p",[t._v("trim()\n字符串模式匹配")])]),t._v(" "),s("li",[s("p",[t._v("match(searchvalue/Regexp)只接受一个参数，由字符串或RegExp对象指定的一个正则表达式 ，返回存放结果的数组")])]),t._v(" "),s("li",[s("p",[t._v("search(searchvalue/Regexp)返回第一个与 regexp 相匹配的子串的起始位置。不执行全局匹配，它将忽略标志 g，总是从字符串的开始进行检索。")])]),t._v(" "),s("li",[s("p",[t._v("replace(searchvalue/Regexp，replacement)replacement可以是字符串，可以是函数。")])]),t._v(" "),s("li",[s("p",[t._v("split(separator,howmany) 方法用于把一个字符串分割成字符串数组。")])])]),t._v(" "),s("h3",{attrs:{id:"array"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[t._v("#")]),t._v(" Array")]),t._v(" "),s("ul",[s("li",[t._v("concat() 用于连接两个或多个数组。\n该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。")]),t._v(" "),s("li",[t._v("push() 可接受任意数量参数，添加到数组末尾，返回修改数组的长度。")]),t._v(" "),s("li",[t._v("pop() 从末尾移除最后一项，减少数组长度，返回移除的项")]),t._v(" "),s("li",[t._v("unshift() 可接受任意数量参数，在数组前端添加任意个项，返回数组的长度")]),t._v(" "),s("li",[t._v("shift() 移除数组中的第一个项，数组长度减一，返回移除的项")]),t._v(" "),s("li",[t._v("reverse() 反转数组项的顺序")]),t._v(" "),s("li",[t._v("sort() 按升序排列数组项")]),t._v(" "),s("li",[t._v("slice() 一个或两个参数，返回起始位置和结束位置之间项不包括结束位置项")]),t._v(" "),s("li",[t._v("splice()\n删除：两个参数，要删除第一项的位置和要删除的项数\n插入：（起始位置，0（要删除的项），要插入的项）\n替换：(起始位置，要删除的项数，要插入的项)\n该方法始终返回一个数组，该数组中包含从原始数组中删除的项。")])]),t._v(" "),s("p",[t._v("位置方法·:")]),t._v(" "),s("ul",[s("li",[t._v("indexOf()")]),t._v(" "),s("li",[t._v("lastIndexOf()")])]),t._v(" "),s("p",[t._v("迭代方法：（要在每一项上运行的函数和（可选的）运行该函数的作用域对象）")]),t._v(" "),s("p",[t._v("函数会接收三个参数：（数组项的值，数组项值的索引，数组对象本身）")]),t._v(" "),s("ul",[s("li",[t._v("every ：对数组中每一项运行函数，若该函数对每一项都返回true,则返回true。")]),t._v(" "),s("li",[t._v("filter ：对数组中每一项运行函数，返回该函数会返回true的项组成的数组。")]),t._v(" "),s("li",[t._v("foreach ：对数组中每一项运行函数，这个方法没有返回值。")]),t._v(" "),s("li",[t._v("map ：对数组中每一项运行函数，返回函数每次调用的结果组成的数组。")]),t._v(" "),s("li",[t._v("some：对数组中每一项运行函数，如果该函数有任一项返回true,则返回true")])]),t._v(" "),s("h3",{attrs:{id:"math"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#math"}},[t._v("#")]),t._v(" Math")]),t._v(" "),s("p",[t._v("ceil floor max min pow round random")]),t._v(" "),s("h2",{attrs:{id:"_20-addeventlistener和onclick-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_20-addeventlistener和onclick-的区别"}},[t._v("#")]),t._v(" 20. addEventListener和onClick()的区别")]),t._v(" "),s("p",[s("strong",[t._v("普通事件（onclick）")])]),t._v(" "),s("p",[t._v("普通事件就是直接触发事件，同一时间只能指向唯一对象，所以会被覆盖掉。")]),t._v(" "),s("p",[s("strong",[t._v("事件绑定（addEventListener）")])]),t._v(" "),s("p",[t._v("事件绑定就是对于一个可以绑定的事件对象，进行多次绑定事件都能运行。")]),t._v(" "),s("h3",{attrs:{id:"二者区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二者区别"}},[t._v("#")]),t._v(" 二者区别")]),t._v(" "),s("p",[t._v("addEventListener对任何DOM都是有效的，而onclick仅限于HTML")]),t._v(" "),s("p",[t._v("addEventListener可以控制listener的触发阶段,（捕获/冒泡）。对于多个相同的事件处理器，不会重复触发，不需要手动使用removeEventListener清除。")]),t._v(" "),s("p",[t._v("总的来说：事件绑定是指把事件注册到具体的元素之上，普通事件指的是可以用来注册的事件")]),t._v(" "),s("h2",{attrs:{id:"_21-new和object-create的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_21-new和object-create的区别"}},[t._v("#")]),t._v(" 21. new和Object.create的区别")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.cn/post/6844903917835436045",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考链接"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("字面量和new关键字创建的对象是Object的实例，原型指向Object.prototype，继承内置对象Object")]),t._v(" "),s("p",[t._v("Object.create(arg, pro)创建的对象的原型取决于arg，arg为null，新对象是空对象，没有原型，不继承任何对象；arg为指定对象，新对象的原型指向指定对象，继承指定对象")]),t._v(" "),s("h2",{attrs:{id:"_22-dom的location对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_22-dom的location对象"}},[t._v("#")]),t._v(" 22. DOM的location对象")]),t._v(" "),s("p",[t._v("location对象")]),t._v(" "),s("p",[t._v("该对象包含有关当前url的信息，常用于修改和获取当前的网址")]),t._v(" "),s("p",[t._v("常用属性：")]),t._v(" "),s("p",[t._v("-hash：设置或返回从#开始的url（锚点）")]),t._v(" "),s("p",[t._v("-host：设置或返回主机名和端口号")]),t._v(" "),s("p",[t._v("-href：设置或获取当前的url地址")]),t._v(" "),s("p",[t._v("-pathname：设置或获取当前url的路径部分")]),t._v(" "),s("p",[t._v("常用方法：")]),t._v(" "),s("p",[t._v("-reload()：重新加载当前页面")]),t._v(" "),s("h2",{attrs:{id:"_23-浏览器从输入url到页面渲染的整个流程-涉及到计算机网络数据传输过程、浏览器解析渲染过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_23-浏览器从输入url到页面渲染的整个流程-涉及到计算机网络数据传输过程、浏览器解析渲染过程"}},[t._v("#")]),t._v(" 23. 浏览器从输入URL到页面渲染的整个流程（涉及到计算机网络数据传输过程、浏览器解析渲染过程）")]),t._v(" "),s("p",[s("strong",[t._v("1.输入网址")])]),t._v(" "),s("p",[t._v("输入要访问的网址，即URL")]),t._v(" "),s("p",[s("strong",[t._v("2.缓存解析")])]),t._v(" "),s("p",[t._v("浏览器获取URL后，先去缓存中查找资源，从浏览器缓存-系统缓存-路由器缓存中查看；\n如果有就从缓存中显示界面，不再发送请求；\n如果没有，则发送http请求；")]),t._v(" "),s("p",[s("strong",[t._v("3.域名解析")])]),t._v(" "),s("p",[t._v("发现缓存中没有资源，发送http请求；\n在发送http请求之前，需要进行DNS解析(域名解析)；\nDNS解析：域名到IP地址的转换过程，域名的解析工作由DNS服务器完成，解析后可以获取域名相应的IP地址；")]),t._v(" "),s("p",[s("strong",[t._v("4.tcp连接，三次握手")])]),t._v(" "),s("p",[t._v("在域名解析后，浏览器向服务器发起了http请求，tcp连接；\n因为tcp协议时面向连接的，所以在传输数据前必须建立连接，即三次握手；\ntcp连接建立后，浏览器开始向服务器发送http请求，请求数据包。请求信息包含一个头部和一个请求体；")]),t._v(" "),s("p",[s("strong",[t._v("5.服务器收到请求")])]),t._v(" "),s("p",[t._v("服务器收到浏览器发送的请求信息，返回一个响应头和一个响应体。")]),t._v(" "),s("p",[s("strong",[t._v("6.页面渲染")])]),t._v(" "),s("p",[t._v("浏览器收到服务器发送的响应头和响应体，进行客户端渲染,生成Dom树，解析css样式,js交互。")]),t._v(" "),s("h2",{attrs:{id:"_24-跨域、同源策略及跨域实现方式和原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_24-跨域、同源策略及跨域实现方式和原理"}},[t._v("#")]),t._v(" 24. 跨域、同源策略及跨域实现方式和原理")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.cn/post/6844904006641254413",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考链接"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("首先，何为同源策略？ 同源策略是由Netspace提出来的一种安全策略。同源的源由一个URL的协议、主机、端口定义，如果这三者一致，那么就是同源。")]),t._v(" "),s("p",[t._v("当不同源的时候，哪些操作被允许呢？")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<script>加载Javascript\n<link> 加载CSS\n<img>加载图片\n<video><audio>加载多媒体\n<object><embed><applet>加载插件\n<iframe>加载任何东西\n链接、跳转、表单提交\n\n")])])]),s("p",[t._v("哪些不允许呢？")]),t._v(" "),s("ul",[s("li",[t._v("跨域文档之间使用Javascript脚本进行交互，API的访问有限制。比如iframe与父页面不同源，想要通过Javascript去操作父页面DOM是不被允许的")]),t._v(" "),s("li",[t._v("不同源之间的XMLHttpRequest不被允许")])]),t._v(" "),s("h3",{attrs:{id:"_1-修改源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-修改源"}},[t._v("#")]),t._v(" 1.修改源")]),t._v(" "),s("p",[t._v("一个页面的源可以修改的，通过document.domain,比如一个页面a.b.com嵌入iframec.b.com，这时候只需要把两个页面的document.domain设置为b.com即可。")]),t._v(" "),s("h3",{attrs:{id:"_2-使用代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用代理"}},[t._v("#")]),t._v(" 2.使用代理")]),t._v(" "),s("p",[t._v("跨域是针对前端来的，服务端是没有跨域这个东西的，所以后台设置一下，前端访问时访问一个同源页面，然后后台把请求的数据转到不同源的页面即可。")]),t._v(" "),s("h3",{attrs:{id:"_3-jsonp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-jsonp"}},[t._v("#")]),t._v(" 3.JSONP")]),t._v(" "),s("p",[t._v("因为script内嵌资源是允许的，所以可以把请求的接口放在script标签上，然后附带我们的回调函数")]),t._v(" "),s("p",[t._v("存在安全问题\n只能是GET请求\n调用是异步的")]),t._v(" "),s("h3",{attrs:{id:"_4-跨域资源共享cors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-跨域资源共享cors"}},[t._v("#")]),t._v(" 4.跨域资源共享CORS")]),t._v(" "),s("p",[t._v("CORS需要浏览器和服务器同时支持，关键是服务器，只要服务器实现了CORS接口就可以跨域通信。")]),t._v(" "),s("p",[t._v("Access-Control-Allow-Origin")]),t._v(" "),s("p",[t._v("简单请求\nhead\nget\npost")]),t._v(" "),s("p",[t._v("对于简单请求，浏览器在头信息里面加一个origin字段，说明本次请求来自哪个源(协议+主机+端口),服务器根据这个值，决定是否同意。如果origin不在指定的源里面，就会返回一个正常的HTTP回应，但是里面不包含Access-Control-Allow-Origin就知道出错了，从而抛出一个错误，被XMLHttpRequest的onerror回调函数捕获。")]),t._v(" "),s("p",[t._v("非简单请求")]),t._v(" "),s("p",[t._v("预请求 预回应")]),t._v(" "),s("p",[t._v("非简单请求就是那种对服务器有特殊要求的请求，比如请求方法为PUT或DELETE")]),t._v(" "),s("h2",{attrs:{id:"_25-浏览器的回流-reflow-和重绘-repaints"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_25-浏览器的回流-reflow-和重绘-repaints"}},[t._v("#")]),t._v(" 25. 浏览器的回流（Reflow）和重绘（Repaints）")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.cn/post/6844903569087266823",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考链接"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("当Render Tree中部分或全部元素的尺寸、结构、或某些属性发生改变时，浏览器重新渲染部分或全部文档的过程称为回流。")]),t._v(" "),s("p",[t._v("当页面中元素样式的改变并不影响它在文档流中的位置时（例如：color、background-color、visibility等），浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘。")]),t._v(" "),s("h2",{attrs:{id:"_26-javascript中的arguments"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_26-javascript中的arguments"}},[t._v("#")]),t._v(" 26. JavaScript中的arguments")]),t._v(" "),s("p",[t._v("如果函数以 () 的方式调用，那么 arguments 就是由所有参数组成的伪数组。")]),t._v(" "),s("p",[t._v("如果函数以 call() 的方式调用，那么 arguments 指的就是第二个及之后的参数组成的伪数组。")]),t._v(" "),s("p",[t._v("需要注意的是，在非严格模式下，arguments 可以被修改。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 非严格模式")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n    arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 200")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 200")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 严格模式")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'use strict'")]),t._v("\n    arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n    arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"_27-eventloop事件循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_27-eventloop事件循环"}},[t._v("#")]),t._v(" 27. EventLoop事件循环")]),t._v(" "),s("p",[t._v("EventLoop中，每一次循环称为tick，每次循环的执行步骤如下：")]),t._v(" "),s("ul",[s("li",[t._v("js引擎线程中的执行栈会首先执行宏任务（一般是script），执行完所有的同步代码")]),t._v(" "),s("li",[t._v("代码的执行过程中一定会有同步代码和异步代码，异步代码根据不同的任务类型，相应的回调函数会添加到宏任务队列和微任务队列中")]),t._v(" "),s("li",[t._v("宏任务执行完后，检查微任务队列，清空微任务队列，执行完所有微任务")]),t._v(" "),s("li",[t._v("微任务队列清空后，如果宿主为浏览器，可能会渲染页面，浏览器也会相应的优化，多个tick后合并成一次渲染页面")]),t._v(" "),s("li",[t._v("开始下一轮tick，宏任务队列中拿出一个宏任务（注意是一个宏任务，setTimeout等回调）执行")])]),t._v(" "),s("p",[t._v("注意页面渲染是在事件循环（EventLoop）之中的")]),t._v(" "),s("p",[t._v("上面的步骤依次执行，实现一个闭环，也就是事件循环")]),t._v(" "),s("h2",{attrs:{id:"_28-宏任务与微任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_28-宏任务与微任务"}},[t._v("#")]),t._v(" 28. 宏任务与微任务")]),t._v(" "),s("p",[t._v("任务队列有分宏任务队列和微任务队列，在代码执行过程中，不同的任务类型添加到不同的队列中，任务队列是先进先出原则")]),t._v(" "),s("h3",{attrs:{id:"宏任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#宏任务"}},[t._v("#")]),t._v(" 宏任务")]),t._v(" "),s("p",[t._v("宏任务是宿主环境本身提供的异步方法")]),t._v(" "),s("ul",[s("li",[t._v("script脚本")]),t._v(" "),s("li",[t._v("setTimeout")]),t._v(" "),s("li",[t._v("setInterval")]),t._v(" "),s("li",[t._v("ajax")]),t._v(" "),s("li",[t._v("DOM事件")])]),t._v(" "),s("h3",{attrs:{id:"微任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微任务"}},[t._v("#")]),t._v(" 微任务")]),t._v(" "),s("p",[t._v("微任务是语言标准所提供的，如果在node中process.nextTick是微任务")]),t._v(" "),s("ul",[s("li",[t._v("Promise")]),t._v(" "),s("li",[t._v("MutationObserver（Mutation Observer API 用来监视 DOM 变动）")])]),t._v(" "),s("h2",{attrs:{id:"_29-bom属性对象方法-浏览器对象模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_29-bom属性对象方法-浏览器对象模型"}},[t._v("#")]),t._v(" 29. BOM属性对象方法  浏览器对象模型")]),t._v(" "),s("p",[t._v("BOM(Browser Object Model) 是指浏览器对象模型，是用于描述这种对象与对象之间层次关系的模型，浏览器对象模型提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。BOM由多个对象组成，其中代表浏览器窗口的Window对象是BOM的顶层对象，其他对象都是该对象的子对象（Screen、Location、History、Navigator）。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/BOM.jpg",alt:"BOM"}})]),t._v(" "),s("h3",{attrs:{id:"window对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#window对象"}},[t._v("#")]),t._v(" Window对象")]),t._v(" "),s("p",[t._v("Window对象，它表示浏览器窗口，在浏览器中最顶层的对象。在浏览器中，每个标签具有自己的 window 对象 。也就是说，同一个窗口的标签之间不会共享一个 window 对象。")]),t._v(" "),s("h3",{attrs:{id:"location对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#location对象"}},[t._v("#")]),t._v(" Location对象")]),t._v(" "),s("p",[t._v("Location 对象表示其链接到的对象的位置（URL）。所做的修改反映在与之相关的对象上。")]),t._v(" "),s("p",[t._v("Document 和 Window 接口都有这样一个链接的Location，分别通过 Document.location和Window.location 访问。")]),t._v(" "),s("h3",{attrs:{id:"history对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#history对象"}},[t._v("#")]),t._v(" History对象")]),t._v(" "),s("p",[t._v("History 对象允许操作浏览器的曾经在标签页或者框架里访问的会话历史记录。")]),t._v(" "),s("h3",{attrs:{id:"navigator对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#navigator对象"}},[t._v("#")]),t._v(" Navigator对象")]),t._v(" "),s("p",[t._v("Navigator 接口表示用户代理的状态和标识。 它允许脚本查询它和注册自己进行一些活动。")]),t._v(" "),s("h3",{attrs:{id:"document对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#document对象"}},[t._v("#")]),t._v(" document对象")]),t._v(" "),s("p",[t._v("Document 对象提供了一些在浏览器服务中作为页面内容入口点而加载的一些页面，也就是 DOM 树。")]),t._v(" "),s("h2",{attrs:{id:"_30-函数柯里化及其通用封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_30-函数柯里化及其通用封装"}},[t._v("#")]),t._v(" 30. 函数柯里化及其通用封装")]),t._v(" "),s("p",[t._v("函数柯里化是把接受多个参数的函数转变成接受一个单一参数(最初函数的第一个参数),并且返回接受余下的参数而且返回结果的新函数的技术")]),t._v(" "),s("p",[t._v("柯里化其实本身是固定一个可以预期的参数，并返回一个特定的函数，处理批特定的需求。这增加了函数的适用性，但同时也降低了函数的适用范围。")]),t._v(" "),s("h2",{attrs:{id:"_31-js的map-和reduce-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_31-js的map-和reduce-方法"}},[t._v("#")]),t._v(" 31. JS的map()和reduce()方法")]),t._v(" "),s("h3",{attrs:{id:"array-map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-map"}},[t._v("#")]),t._v(" Array.map()")]),t._v(" "),s("p",[t._v("Array.map() 根据传递的转换函数，更新给定数组中的每个值，并返回一个相同长度的新数组。它接受一个回调函数作为参数，用以执行转换过程。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newArray "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oldArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("一个帮助记住 map 的方法：Morph Array Piece-by-Piece（逐个改变数组） 你可以使用 map 代替 for-each 循环，来遍历并对每个值应用转换函数。这个方法适用于当你想更新数组的同时保留原始值。它不会潜在地删除任何值（filter 方法会），也不会计算出一个新的输出（就像 reduce 那样）。map 允许你逐个改变数组。一起来看一个例子：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("78")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("val")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the result is: [10, 40, 60, 140, 320, 780]")]),t._v("\n")])])]),s("h3",{attrs:{id:"array-filter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-filter"}},[t._v("#")]),t._v(" Array.filter()")]),t._v(" "),s("p",[t._v("当我们想要过滤数组的值到另一个数组，新数组中的每个值都通过一个特定检查，Array.filter() 这个快捷实用的方法就派上用场了。 类似搜索过滤器，filter 基于传递的参数来过滤出值。\n举个例子，假定有个数字数组，想要过滤出大于 10 的值，可以这样写：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("78")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("val")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the result is: [14, 32, 78]")]),t._v("\n")])])]),s("p",[t._v("但是 filter 方法，只返回真值。因此如果所有值都执行指定的检查的话，结果的长度会小于等于原始数组。")]),t._v(" "),s("h2",{attrs:{id:"_32-和-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_32-和-的区别"}},[t._v("#")]),t._v(" 32. “==”和“===”的区别")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v(" ===比较类型和值，==只比较值。\n")])])]),s("h2",{attrs:{id:"_33-settimeout用作倒计时为何会产生误差"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_33-settimeout用作倒计时为何会产生误差"}},[t._v("#")]),t._v(" 33. setTimeout用作倒计时为何会产生误差？")]),t._v(" "),s("p",[t._v("当我们执行 JS 代码的时候其实就是往执行栈中放入函数，当遇到异步的代码时，会被挂起并在需要执行的时候加入到 Task（有多种 Task） 队列中。一旦执行栈为空，Event Loop 就会从 Task 队列中拿出需要执行的代码并放入执行栈中执行。")]),t._v(" "),s("p",[t._v("上面讲了定时器是属于 宏任务(macrotask) 。如果当前 执行栈 所花费的时间大于 定时器 时间，那么定时器的回调在 宏任务(macrotask) 里，来不及去调用，所有这个时间会有误差。")])])}),[],!1,null,null,null);a.default=r.exports}}]);